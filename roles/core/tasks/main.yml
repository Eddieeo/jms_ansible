---

- name: install git gcc
  yum:
    name:
      - gcc
      - git
      - libselinux-python
      - libsemanage-python
    state: present

- firewalld:
    rich_rule: 'rule family=ipv4 source address="{{ jms_network }}" port protocol=tcp port=80 accept'
    permanent: yes
    state: enabled
    immediate: yes

- seboolean:
    name: httpd_can_network_connect
    state: yes
    persistent: yes

- name: install python36
  yum:
    name:
      - python36
      - python36-devel
    state: present

- name: copy file to core
  copy:
    src: "{{ item }}"
    dest: "{{ install_dir }}"
    mode: '0755'
  loop:
    - "{{ downloads_dir }}/jumpserver.tar.gz"
  notify:
    - extract core

- meta: flush_handlers

- name: create pip directories
  file:
    path: /root/.pip
    state: directory

- name: copy pypi mirrors file
  copy:
    src: "{{ downloads_dir }}/{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - { src: pip.conf, dest: /root/.pip/pip.conf }
    - { src: .pydistutils.cfg, dest: /root/.pydistutils.cfg }

- name: install nfs-utils
  yum:
    name:
      - nfs-utils
    state: present

- name: mount nfs data directory
  mount:
    fstype: nfs
    opts: rw
    src: "{{ groups['nfs'][0] }}:{{ nfs_src_dir }}"
    path: "{{ nfs_dest_dir }}"
    state: mounted

- name: install core requirement
  yum:
    name:
      - krb5-devel
      - libtiff-devel
      - libjpeg-devel
      - libzip-devel
      - freetype-devel
      - lcms2-devel
      - libwebp-devel
      - tcl-devel
      - tk-devel
      - sshpass
      - openldap-devel
      - mariadb-devel
      - libffi-devel
      - openssh-clients
      - telnet
      - openldap-clients
    state: present

- shell: "/usr/bin/python3.6 -m venv {{ install_dir }}/py3"
- shell: "{{ install_dir }}/py3/bin/pip install wheel"
- shell: "{{ install_dir }}/py3/bin/pip install -U pip setuptools"
- shell: "{{ install_dir }}/py3/bin/pip install -r {{ install_dir }}/jumpserver/requirements/requirements.txt"

- name: copy core conf file
  template:
    src: "{{ item }}"
    dest: "{{ install_dir }}/jumpserver/config.yml"
  loop:
    - config.yml.j2

- name: copy service file
  template:
    src: "{{ item }}"
    dest: "/lib/systemd/system/jms_core.service"
  loop:
    - jms_core.service.j2
  notify:
    - reload systemd

- name: start core automatic start
  systemd:
    name: jms_core
    state: started
    enabled: yes

- name: copy tengine to core
  copy:
    src: "{{ item }}"
    dest: "{{ install_dir }}/"
  loop:
    - "{{ downloads_dir }}/{{ tengine_name }}"

- name: install tengine-server
  yum:
    name:
      - "{{ install_dir }}/{{ tengine_name }}"
    state: present

- name: remove nginx default conf
  file:
    path: /etc/nginx/conf.d/default.conf
    state: absent

- name: copy nginx conf
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - { src: jumpserver.conf.j2, dest: /etc/nginx/conf.d/jumpserver.conf }
  notify:
    - restart nginx
